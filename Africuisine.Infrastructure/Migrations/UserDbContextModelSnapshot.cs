// <auto-generated />
using System;
using Africuisine.Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Africuisine.Infrastructure.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Africuisine.Domain.Entities.User.CulturalGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeqNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CulturalGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9b3a7db6-b330-4583-8140-0352ac6a8011",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(370),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(372),
                            Name = "Zulu",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "8e861f64-c30b-47dc-b12e-d546cfd17453",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(383),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(383),
                            Name = "Xhosa",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "f4db1989-7ef1-42b0-8561-de3fdd771b8f",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(389),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(390),
                            Name = "Tswana",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "4bf4eb45-2e94-48fd-a548-48145607e4cf",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(395),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(395),
                            Name = "Sotho",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "369dc868-f621-40ce-aad3-54bba2be2b8e",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(410),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(411),
                            Name = "Swazi",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "1cb706f7-730f-43a8-8616-a24ca32826e4",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(419),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(420),
                            Name = "Venda",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "3ec01b27-7578-4a56-96d4-f41246a90774",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(424),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(424),
                            Name = "Tsonga",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "843eaf24-bc1c-442b-a28a-5859e9eb749b",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(429),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(430),
                            Name = "Ndebele",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "a3b3fa07-fddb-4263-88f5-db1de384c961",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(434),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(435),
                            Name = "BaPedi",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "36dc8713-5eca-45e6-895c-a3da20be0b3f",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(537),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(538),
                            Name = "Khoisan",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "3f17c686-cabe-4cea-bb2a-dfddc59ecac2",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(543),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(543),
                            Name = "Griqua",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "f877826e-5f05-4998-9ec0-bd90ad6bccac",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(548),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(549),
                            Name = "Coloured",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "04d33c2e-fe8c-4600-bd4d-46ad8d86c5fd",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(558),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(559),
                            Name = "Indian",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "5415b068-fe83-4229-9f77-3b64155542ed",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(564),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(564),
                            Name = "English",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "2a5b27a1-65be-4a0a-bdb7-620cb1f65bb3",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(569),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 945, DateTimeKind.Utc).AddTicks(570),
                            Name = "Afrikaaner",
                            SeqNo = 0
                        });
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("LUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("SeqNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a773c719-73e2-46a4-91d9-5ccd84b101fa",
                            ConcurrencyStamp = "39b6154d-2b7a-4b80-a7a6-0d24f77f86e4",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 944, DateTimeKind.Utc).AddTicks(8272),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 944, DateTimeKind.Utc).AddTicks(8277),
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR",
                            SeqNo = 0
                        },
                        new
                        {
                            Id = "108d0ef0-290d-4d08-a34f-9b181f0db61e",
                            ConcurrencyStamp = "6446d2d8-9813-4571-ab1c-9c5fb75c6103",
                            Creation = new DateTime(2024, 3, 2, 19, 55, 0, 944, DateTimeKind.Utc).AddTicks(8327),
                            LUserUpdate = "",
                            LastUpdate = new DateTime(2024, 3, 2, 19, 55, 0, 944, DateTimeKind.Utc).AddTicks(8328),
                            Name = "Mobile",
                            NormalizedName = "MOBILE",
                            SeqNo = 0
                        });
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Creation")
                        .HasColumnType("datetime2");

                    b.Property<string>("CulturalGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LUserUpdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeqNo")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CulturalGroupId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_UserName")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.RoleClaim", b =>
                {
                    b.HasOne("Africuisine.Domain.Entities.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.User", b =>
                {
                    b.HasOne("Africuisine.Domain.Entities.User.CulturalGroup", null)
                        .WithMany()
                        .HasForeignKey("CulturalGroupId");
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserClaim", b =>
                {
                    b.HasOne("Africuisine.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserLogin", b =>
                {
                    b.HasOne("Africuisine.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserRole", b =>
                {
                    b.HasOne("Africuisine.Domain.Entities.User.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Africuisine.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Africuisine.Domain.Entities.User.UserToken", b =>
                {
                    b.HasOne("Africuisine.Domain.Entities.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
